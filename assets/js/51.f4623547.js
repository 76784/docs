(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{344:function(e,t,a){"use strict";a.r(t);var s=a(3),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"these-texts-are-currently-looking-for-a-new-place-in-the-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#these-texts-are-currently-looking-for-a-new-place-in-the-docs","aria-hidden":"true"}},[e._v("#")]),e._v(" These texts are currently looking for a new place in the docs:")]),e._v(" "),a("p",[e._v("Nested handlebars paths can also include "),a("code",[e._v("../")]),e._v(" segments, which evaluate their paths against a parent context.")]),e._v(" "),a("Example",{attrs:{examplePage:"/examples/path-expressions-dot-dot",showInputOutput:!0}}),e._v(" "),a("p",[e._v("Even though the name is printed while in the context of a comment, it can still go back to the main context (the\nroot-object) to retrieve the prefix.")]),e._v(" "),a("div",{pre:!0},[a("div",{pre:!0,attrs:{class:"warning custom-block"}},[a("p",[e._v("The exact value that "),a("code",[e._v("../")]),e._v(" will resolve to varies based on the helper that is calling the block. Using "),a("code",[e._v("../")]),e._v(" is only\nnecessary when context changes. Children of helpers such as "),a("code",[e._v("{{#each}}")]),e._v(" would require the use of "),a("code",[e._v("../")]),e._v(" while children of\nhelpers such as "),a("code",[e._v("{{#if}}")]),e._v(" do not.")])])]),a("p",[e._v("In this example all of the above reference the same prefix value even though they are located within different blocks.\nThis behavior is new as of Handlebars 4, the release notes discuss the prior behavior as well as the migration plan.\nHandlebars also allows for name conflict resolution between helpers and data fields via a this reference:")]),e._v(" "),a("Example",{attrs:{examplePage:"/examples/helper-data-name-conflict",hidePreparationScript:!0}}),e._v(" "),a("p",[e._v("Any of the above would cause the name field on the current context to be used rather than a helper of the same name.")]),e._v(" "),a("h2",{attrs:{id:"todo-move-to-helpers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#todo-move-to-helpers","aria-hidden":"true"}},[e._v("#")]),e._v(' TODO: Move to "helpers"')]),e._v(" "),a("h3",{attrs:{id:"literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literals","aria-hidden":"true"}},[e._v("#")]),e._v(" Literals")]),e._v(" "),a("p",[e._v("Helper calls may also have literal values passed to them either as parameter arguments or hash arguments. Supported\nliterals include numbers, strings, "),a("code",[e._v("true")]),e._v(", "),a("code",[e._v("false")]),e._v(", "),a("code",[e._v("null")]),e._v(" and ? "),a("code",[e._v("undefined")]),e._v(".")]),e._v(" "),a("Example",{attrs:{examplePage:"/examples/helper-literals",showInputOutput:!1}})],1)}),[],!1,null,null,null);t.default=r.exports}}]);